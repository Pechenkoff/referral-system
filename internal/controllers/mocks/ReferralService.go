// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	entities "referral-system/internal/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ReferralService is an autogenerated mock type for the ReferralService type
type ReferralService struct {
	mock.Mock
}

// CreateReferralCode provides a mock function with given fields: userID, expiresIn
func (_m *ReferralService) CreateReferralCode(userID int, expiresIn time.Duration) (*entities.ReferralCode, error) {
	ret := _m.Called(userID, expiresIn)

	if len(ret) == 0 {
		panic("no return value specified for CreateReferralCode")
	}

	var r0 *entities.ReferralCode
	var r1 error
	if rf, ok := ret.Get(0).(func(int, time.Duration) (*entities.ReferralCode, error)); ok {
		return rf(userID, expiresIn)
	}
	if rf, ok := ret.Get(0).(func(int, time.Duration) *entities.ReferralCode); ok {
		r0 = rf(userID, expiresIn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ReferralCode)
		}
	}

	if rf, ok := ret.Get(1).(func(int, time.Duration) error); ok {
		r1 = rf(userID, expiresIn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReferralCode provides a mock function with given fields: userID
func (_m *ReferralService) DeleteReferralCode(userID int) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReferralCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReferralCodeByUserID provides a mock function with given fields: userID
func (_m *ReferralService) GetReferralCodeByUserID(userID int) (*entities.ReferralCode, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetReferralCodeByUserID")
	}

	var r0 *entities.ReferralCode
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entities.ReferralCode, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) *entities.ReferralCode); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ReferralCode)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReferralsByReferrerID provides a mock function with given fields: referrerID
func (_m *ReferralService) GetReferralsByReferrerID(referrerID int) ([]*entities.Referral, error) {
	ret := _m.Called(referrerID)

	if len(ret) == 0 {
		panic("no return value specified for GetReferralsByReferrerID")
	}

	var r0 []*entities.Referral
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*entities.Referral, error)); ok {
		return rf(referrerID)
	}
	if rf, ok := ret.Get(0).(func(int) []*entities.Referral); ok {
		r0 = rf(referrerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Referral)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(referrerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterWithReferralCode provides a mock function with given fields: referralCode, name, email, password
func (_m *ReferralService) RegisterWithReferralCode(referralCode string, name string, email string, password string) (*entities.User, error) {
	ret := _m.Called(referralCode, name, email, password)

	if len(ret) == 0 {
		panic("no return value specified for RegisterWithReferralCode")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*entities.User, error)); ok {
		return rf(referralCode, name, email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *entities.User); ok {
		r0 = rf(referralCode, name, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(referralCode, name, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReferralService creates a new instance of ReferralService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReferralService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReferralService {
	mock := &ReferralService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
